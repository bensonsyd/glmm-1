?list
list(rep(0, 3))
as.list(rep(0, 3))
q <- as.list(rep(0, 3))
q[[1]] <- c(7, 8, 9)
q
Reduce(c, q)
install.packages('glmm')
library(glmm)
set.seed(1234)
data("BoothHobert")
test<-glmm(y~0+x1,list(y~0+z1),varcomps.names=c("z1"),data=BoothHobert,
family.glmm=bernoulli.glmm,m=6,doPQL=FALSE,debug=TRUE)
mod.mcml<-test$mod.mcml
debug<-test$debug
nu.pql<-debug$nu.pql
beta.pql<-debug$beta.pql
family.glmm<-test$family.glmm
umat<-debug$umat
u.pql<-debug$u.star
m1<-debug$m1
ntrials<-1
par<-c(6,1.5)
del<-rep(10^-8,2)
objfun<-glmm:::objfun
getEk<-glmm:::getEk
addVecs<-glmm:::addVecs
eek<-getEk(mod.mcml$z)
Aks<-Map("*",eek,nu.pql)
D.star<-addVecs(Aks)
D.star<-diag(D.star)
D.star.inv<-solve(D.star)
Z=do.call(cbind,mod.mcml$z)
eta.star<-as.vector(mod.mcml$x%*%beta.pql+Z%*%u.pql)
cdouble<-bernoulli.glmm()$cpp(eta.star) #still a vector
cdouble<-diag(cdouble)
Sigmuh.inv<- t(Z)%*%cdouble%*%Z+D.star.inv
Sigmuh<-solve(Sigmuh.inv)
p1=p2=p3=1/3
zeta=5
tconstant<-glmm:::tconstant
no_cores <- max(1, detectCores() - 1)
getFamily<-glmm:::getFamily
regobj<-objfun(par=par, nbeta=1, nu.pql=nu.pql, umat=umat, u.star=u.pql, mod.mcml=mod.mcml, family.glmm=family.glmm,p1=p1,p2=p2,p3=p3,m1=m1, Sigmuh=Sigmuh, D.star=D.star, Sigmuh.inv= Sigmuh.inv, zeta=zeta, ntrials=ntrials)
regobj
set.seed(1234)
data("BoothHobert")
test<-glmm(y~0+x1,list(y~0+z1),varcomps.names=c("z1"),data=BoothHobert,
family.glmm=bernoulli.glmm,m=17,doPQL=FALSE,debug=TRUE)
mod.mcml<-test$mod.mcml
debug<-test$debug
nu.pql<-debug$nu.pql
beta.pql<-debug$beta.pql
family.glmm<-test$family.glmm
umat<-debug$umat
u.pql<-debug$u.star
m1<-debug$m1
ntrials<-1
par<-c(6,1.5)
del<-rep(10^-8,2)
objfun<-glmm:::objfun
getEk<-glmm:::getEk
addVecs<-glmm:::addVecs
eek<-getEk(mod.mcml$z)
Aks<-Map("*",eek,nu.pql)
D.star<-addVecs(Aks)
D.star<-diag(D.star)
D.star.inv<-solve(D.star)
Z=do.call(cbind,mod.mcml$z)
eta.star<-as.vector(mod.mcml$x%*%beta.pql+Z%*%u.pql)
cdouble<-bernoulli.glmm()$cpp(eta.star) #still a vector
cdouble<-diag(cdouble)
Sigmuh.inv<- t(Z)%*%cdouble%*%Z+D.star.inv
Sigmuh<-solve(Sigmuh.inv)
p1=p2=p3=1/3
zeta=5
tconstant<-glmm:::tconstant
no_cores <- max(1, detectCores() - 1)
getFamily<-glmm:::getFamily
regobj<-objfun(par=par, nbeta=1, nu.pql=nu.pql, umat=umat, u.star=u.pql, mod.mcml=mod.mcml, family.glmm=family.glmm,p1=p1,p2=p2,p3=p3,m1=m1, Sigmuh=Sigmuh, D.star=D.star, Sigmuh.inv= Sigmuh.inv, zeta=zeta, ntrials=ntrials)
install.packages('glmm')
install.packages("glmm")
library(glmm)
set.seed(1234)
data("BoothHobert")
test<-glmm(y~0+x1,list(y~0+z1),varcomps.names=c("z1"),data=BoothHobert,
family.glmm=bernoulli.glmm,m=17,doPQL=FALSE,debug=TRUE)
mod.mcml<-test$mod.mcml
debug<-test$debug
nu.pql<-debug$nu.pql
beta.pql<-debug$beta.pql
family.glmm<-test$family.glmm
umat<-debug$umat
u.pql<-debug$u.star
m1<-debug$m1
ntrials<-1
par<-c(6,1.5)
del<-rep(10^-8,2)
objfun<-glmm:::objfun
getEk<-glmm:::getEk
addVecs<-glmm:::addVecs
eek<-getEk(mod.mcml$z)
Aks<-Map("*",eek,nu.pql)
D.star<-addVecs(Aks)
D.star<-diag(D.star)
D.star.inv<-solve(D.star)
Z=do.call(cbind,mod.mcml$z)
eta.star<-as.vector(mod.mcml$x%*%beta.pql+Z%*%u.pql)
cdouble<-bernoulli.glmm()$cpp(eta.star) #still a vector
cdouble<-diag(cdouble)
Sigmuh.inv<- t(Z)%*%cdouble%*%Z+D.star.inv
Sigmuh<-solve(Sigmuh.inv)
p1=p2=p3=1/3
zeta=5
tconstant<-glmm:::tconstant
no_cores <- max(1, detectCores() - 1)
getFamily<-glmm:::getFamily
regobj<-objfun(par=par, nbeta=1, nu.pql=nu.pql, umat=umat, u.star=u.pql, mod.mcml=mod.mcml, family.glmm=family.glmm,p1=p1,p2=p2,p3=p3,m1=m1, Sigmuh=Sigmuh, D.star=D.star, Sigmuh.inv= Sigmuh.inv, zeta=zeta, ntrials=ntrials)
regobj
install.packages('glmm')
install.packages("glmm")
library(glmm)
citation('glmm')
set.seed(1234)
data(salamander)
start <- proc.time()
sal <- glmm(Mate ~ 0 + Cross,
random = list( ~ 0 + Female, ~ 0 + Male ),
varcomps.names = c( "F" , "M" ),
data = salamander,  m = 10^4,
family.glmm = bernoulli.glmm, debug=TRUE)
proc.time()-start
citation('glmm')
set.seed(1234)
data(salamander)
start <- proc.time()
sal <- glmm(Mate ~ 0 + Cross,
random = list( ~ 0 + Female, ~ 0 + Male ),
varcomps.names = c( "F" , "M" ),
data = salamander,  m = 10^4,
family.glmm = bernoulli.glmm, debug=TRUE)
proc.time()-start
sal$cores
sal
?importFrom
install.packages('roxygen2')
library(roxygen2)
?importFrom
?clusterEvalQ
install.packages('foreach')
?dopar
library(foreach)
?dopar
?new.env
v <- new.env(parent = emptyenv())
v
p <- 5
v$p <- p
v
v$p
?clusterExport
library(parallel)
?clusterExport
