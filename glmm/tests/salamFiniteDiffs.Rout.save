
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(glmm)
Loading required package: trust
Loading required package: mvtnorm
Loading required package: Matrix
> set.seed(1234)
> data(salamander)
> sal<-glmm(Mate~Cross,random=list(~0+Female,~0+Male),varcomps.names=c("F","M"), data=salamander,family.glmm=bernoulli.glmm,m=100,debug=TRUE,doPQL=FALSE, cores=2)
> 
> vars <- new.env(parent = emptyenv())
> objfun<-glmm:::objfun
> beta<-rep(0,4)
> nu<-rep(2,2)
> par<-c(beta,nu)
> vars$nbeta<-4
> 
> debug<-sal$debug
> vars$nu.pql<-debug$nu.pql
> beta.pql<-debug$beta.pql
> vars$umat<-debug$umat
> vars$m1<-debug$m1
> vars$p1<-vars$p2<-vars$p3<-1/3
> vars$mod.mcml<-sal$mod.mcml
> vars$u.star<-debug$u.star
> vars$family.glmm=bernoulli.glmm
> vars$zeta<-5
> 
> getEk<-glmm:::getEk
> addVecs<-glmm:::addVecs
> 
> #need to get D*
> eek<-getEk(vars$mod.mcml$z)
> Aks<-Map("*",eek,vars$nu.pql)
> vars$D.star<-addVecs(Aks) 
> vars$D.star<-diag(vars$D.star)
> D.star.inv<-solve(vars$D.star)
> 
> cache<-new.env(parent = emptyenv())
> 
> #need to also recreate the variance matrix of last imp sampling distribution
> Z=do.call(cbind,vars$mod.mcml$z)
> eta.star<-as.vector(vars$mod.mcml$x%*%beta.pql+Z%*%vars$u.star)
> cdouble<-bernoulli.glmm()$cpp(eta.star) #still a vector
> cdouble<-diag(cdouble)
> vars$Sigmuh.inv<- t(Z)%*%cdouble%*%Z+D.star.inv
> vars$Sigmuh<-solve(vars$Sigmuh.inv)
> 
> #evaluate objective function at two close places
> del<-rep(10^-6,6)
> vars$ntrials<-1
> 
> vars$no_cores <- sal$cores
> 
> ltheta<-objfun(par, cache, vars=vars)
> 
> lthetadel<-objfun(par+del, cache, vars=vars)
> 
> #do finite diffs to check value --> gradient
> c(as.vector(ltheta$gradient%*%del),lthetadel$value-ltheta$value)
[1] -5.137664e-05 -5.137676e-05
> as.vector(ltheta$gradient%*%del)-(lthetadel$value-ltheta$value)
[1] 1.131129e-10
> all.equal(as.vector(ltheta$gradient%*%del),lthetadel$value-ltheta$value,tolerance=10^-5)
[1] TRUE
> 
> #do finite diffs to check gradient --> hessian 
> all.equal(lthetadel$gradient-ltheta$gradient,as.vector(ltheta$hessian%*%del),tolerance=10^-6)
[1] TRUE
> cbind(lthetadel$gradient-ltheta$gradient,as.vector(ltheta$hessian%*%del))
              [,1]          [,2]
[1,] -1.269181e-04 -1.269182e-04
[2,] -3.673015e-05 -3.673015e-05
[3,] -3.618855e-05 -3.618857e-05
[4,] -3.591007e-05 -3.591009e-05
[5,]  4.373356e-06  4.373348e-06
[6,]  4.276783e-06  4.276776e-06
> #how big are the diffs? very small
> lthetadel$gradient-ltheta$gradient-as.vector(ltheta$hessian%*%del)
[1] 4.985172e-11 2.690709e-12 2.140972e-11 1.902570e-11 7.987422e-12
[6] 6.516001e-12
> 
> 
> 
> proc.time()
   user  system elapsed 
  3.749   0.993  71.075 
