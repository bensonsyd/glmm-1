
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(glmm)
Loading required package: trust
Loading required package: mvtnorm
Loading required package: Matrix
> data(BoothHobert)
> set.seed(1234)
> out<-glmm(y~0+x1,list(y~0+z1),varcomps.names=c("z1"),data=BoothHobert,
+           family.glmm=bernoulli.glmm,m=50,doPQL=FALSE,debug=TRUE, cores=2)
> vars <- new.env(parent = emptyenv())
> vars$mod.mcml<-out$mod.mcml
> debug<-out$debug
> vars$nu.pql<-debug$nu.pql
> vars$nu.pql
[1] 1
> beta.pql<-debug$beta.pql
> beta.pql
[1] 0
> vars$family.glmm<-out$family.glmm
> vars$umat<-debug$umat
> u.pql<-debug$u.star
> vars$m1<-debug$m1
> vars$ntrials<-1
> 
> par<-c(6,1.5)
> del<-rep(10^-8,2)
> 
> objfun<-glmm:::objfun
> getEk<-glmm:::getEk
> addVecs<-glmm:::addVecs
> 
> #need to get D*
> eek<-getEk(vars$mod.mcml$z)
> Aks<-Map("*",eek,vars$nu.pql)
> vars$D.star<-addVecs(Aks) 
> vars$D.star<-diag(vars$D.star)
> D.star.inv<-solve(vars$D.star)
> 
> 
> #need to also recreate the variance matrix of last imp sampling distribution
> Z=do.call(cbind,vars$mod.mcml$z)
> eta.star<-as.vector(vars$mod.mcml$x%*%beta.pql+Z%*%u.pql)
> cdouble<-bernoulli.glmm()$cpp(eta.star) #still a vector
> cdouble<-diag(cdouble)
> vars$Sigmuh.inv<- t(Z)%*%cdouble%*%Z+D.star.inv
> vars$Sigmuh<-solve(vars$Sigmuh.inv)
> 
> vars$p1=vars$p2=vars$p3=1/3
> vars$zeta=5
> 
> vars$no_cores <- 1
> 
> vars$nbeta <- 1
> vars$u.star <- u.pql
> 
> core1<-objfun(par=par, vars=vars)
> 
> vars$no_cores <- out$cores
> 
> core2<-objfun(par=par, vars=vars)
> 
> all.equal(core1, core2)
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  2.382   0.429  56.756 
