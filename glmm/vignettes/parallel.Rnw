\documentclass[11pt]{article}

%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{parallel}
  %\usepackage[utf8]{inputenc}
%\VignettePackage{glmm}
%\VignetteKeywords{glmm, maximum likelihood, mle, Monte Carlo, likelihood approximation, likelihood based inference, Monte Carlo likelihood approximation, salamander, generalized linear mixed model, parallel computing}

\usepackage{hyperref}

\title{Parallel Computing in the R package \texttt{glmm}}
\author{Sydney Benson}
\begin{document}
%\SweaveOpts{concordance=TRUE}

\maketitle
\setlength\parindent{0pt}
\tableofcontents

\break
\section{Introduction}
The R package \texttt{glmm} approximates the likelihood function for generalized linear mixed models (GLMMs) with a canonical link. \texttt{glmm} calculates and maximizes the Monte Carlo likelihood approximation (MCLA) to find Monte Carlo maximum likelihood estimates (MCMLEs) for the fixed effects and variance components. The value, gradient vector, and Hessian matrix of the MCLA are calculated to maximize the likelihood and the MCMLEs. The Hessian of the MCLA is used to calculate the standard errors for the MCMLEs. \\

In version 1.2.4, the R package \texttt{glmm} has been revised to calculate the value, gradient vector and Hessian matrix in parallel. This addition has incorporated an optional argument to the \texttt{glmm} command, an increased number of outputs, and has decreased the time it takes to fit the model in most cases. \\

\section{Additional Model-Fitting Arguments}
In the following code, we fit the model using the \texttt{glmm} command and save the model under the name  \texttt{sal}. The final argument for the \texttt{glmm} command is \texttt{cores}. The \texttt{cores} argument is optional and, by default, R will calculate the maximum number of cores, without restricting device use, to use for the parallel calculations if \texttt{cores} is not specified. The optimal number of cores is one less than the number of cores available in the device. However, if you choose to specify a different number of cores, you may do that using the \texttt{cores} argument. In this example, we will use two cores. \\

Note: you may only specify the number of cores you want to use if it is less than or equal to the optimal number of cores that R defines. If you specify a number greater than the optimal number defined by R, the number of cores used will default to R's optimal number. \\

Using multiple cores is useful for reducing the time the \texttt{glmm} command takes to run, thus allowing for an increased \texttt{m} without additional computational expense. An increased \texttt{m} allows the model to provide more accurate estimates, but can also increase the model-fitting time exponentially. Using multiple cores can help mitigate this problem.  We can see the time reduction made by running the calculations in parallel using the \texttt{proc.time} command. First, the model-fitting time for the command using one core and $m=10^4$ is given. 

<<timing1>>=
library(glmm)
data(salamander)
set.seed(1234) 
start <- proc.time()
sal <- glmm(Mate ~ 0 + Cross, random = list(~ 0 + Female, 
~ 0 + Male), varcomps.names = c("F", "M"), data = salamander, 
family.glmm = bernoulli.glmm, m = 10^4, debug = TRUE, cores = 1)
proc.time() - start
@

Next, the model-fitting time for the command using two cores with the same Monte Carlo sample size is found.

<<timing2>>=
set.seed(1234) 
start <- proc.time()
sal <- glmm(Mate ~ 0 + Cross, random = list(~ 0 + Female, 
~ 0 + Male), varcomps.names = c("F", "M"), data = salamander, 
family.glmm = bernoulli.glmm, m = 10^4, debug = TRUE, cores = 2)
proc.time() - start
@

To read about the other arguments in the \texttt{glmm} command, please read \href{https://cran.r-project.org/web/packages/glmm/vignettes/intro.pdf}{``An Introduction to Model-Fitting with the R package \texttt{glmm}"}. \\

\end{document}